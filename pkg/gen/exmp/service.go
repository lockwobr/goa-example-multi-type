// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp service
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package exmp

import (
	"context"

	exmpviews "github.com/lockwobr/goa-example-multi-type/pkg/gen/exmp/views"
)

// Service is the exmp service interface.
type Service interface {
	// GetPerson implements get-person.
	GetPerson(context.Context) (res *Person, err error)
	// GetFam implements get-fam.
	GetFam(context.Context) (res *Fam, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "exmp"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"get-person", "get-fam"}

// Person is the result type of the exmp service get-person method.
type Person struct {
	Name *string `json:"first_name"`
	Age  *int
}

// Fam is the result type of the exmp service get-fam method.
type Fam struct {
	Surname *string
	Size    *int
	Mother  *Person `json:"mom"`
	Father  *Person `json:"dad"`
	Kids    []*Person
}

// NewPerson initializes result type Person from viewed result type Person.
func NewPerson(vres *exmpviews.Person) *Person {
	return newPerson(vres.Projected)
}

// NewViewedPerson initializes viewed result type Person from result type
// Person using the given view.
func NewViewedPerson(res *Person, view string) *exmpviews.Person {
	p := newPersonView(res)
	return &exmpviews.Person{Projected: p, View: "default"}
}

// NewFam initializes result type Fam from viewed result type Fam.
func NewFam(vres *exmpviews.Fam) *Fam {
	return newFam(vres.Projected)
}

// NewViewedFam initializes viewed result type Fam from result type Fam using
// the given view.
func NewViewedFam(res *Fam, view string) *exmpviews.Fam {
	p := newFamView(res)
	return &exmpviews.Fam{Projected: p, View: "default"}
}

// newPerson converts projected type Person to service type Person.
func newPerson(vres *exmpviews.PersonView) *Person {
	res := &Person{
		Name: vres.Name,
		Age:  vres.Age,
	}
	return res
}

// newPersonView projects result type Person to projected type PersonView using
// the "default" view.
func newPersonView(res *Person) *exmpviews.PersonView {
	vres := &exmpviews.PersonView{
		Name: res.Name,
		Age:  res.Age,
	}
	return vres
}

// newFam converts projected type Fam to service type Fam.
func newFam(vres *exmpviews.FamView) *Fam {
	res := &Fam{
		Surname: vres.Surname,
		Size:    vres.Size,
	}
	if vres.Father != nil {
		res.Father = transformExmpviewsPersonViewToPerson(vres.Father)
	}
	if vres.Kids != nil {
		res.Kids = make([]*Person, len(vres.Kids))
		for i, val := range vres.Kids {
			res.Kids[i] = transformExmpviewsPersonViewToPerson(val)
		}
	}
	if vres.Mother != nil {
		res.Mother = newPerson(vres.Mother)
	}
	return res
}

// newFamView projects result type Fam to projected type FamView using the
// "default" view.
func newFamView(res *Fam) *exmpviews.FamView {
	vres := &exmpviews.FamView{
		Surname: res.Surname,
		Size:    res.Size,
	}
	if res.Father != nil {
		vres.Father = transformPersonToExmpviewsPersonView(res.Father)
	}
	if res.Kids != nil {
		vres.Kids = make([]*exmpviews.PersonView, len(res.Kids))
		for i, val := range res.Kids {
			vres.Kids[i] = transformPersonToExmpviewsPersonView(val)
		}
	}
	if res.Mother != nil {
		vres.Mother = newPersonView(res.Mother)
	}
	return vres
}

// transformExmpviewsPersonViewToPerson builds a value of type *Person from a
// value of type *exmpviews.PersonView.
func transformExmpviewsPersonViewToPerson(v *exmpviews.PersonView) *Person {
	if v == nil {
		return nil
	}
	res := &Person{
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}

// transformPersonToExmpviewsPersonView builds a value of type
// *exmpviews.PersonView from a value of type *Person.
func transformPersonToExmpviewsPersonView(v *Person) *exmpviews.PersonView {
	if v == nil {
		return nil
	}
	res := &exmpviews.PersonView{
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}
