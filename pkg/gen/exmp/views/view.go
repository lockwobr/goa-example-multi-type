// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp views
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Person is the viewed result type that is projected based on a view.
type Person struct {
	// Type to project
	Projected *PersonView
	// View to render
	View string
}

// Fam is the viewed result type that is projected based on a view.
type Fam struct {
	// Type to project
	Projected *FamView
	// View to render
	View string
}

// PersonView is a type that runs validations on a projected type.
type PersonView struct {
	Name *string `json:"first_name"`
	Age  *int
}

// FamView is a type that runs validations on a projected type.
type FamView struct {
	Surname *string
	Size    *int
	Mother  *PersonView `json:"mom"`
	Father  *PersonView `json:"dad"`
	Kids    []*PersonView
}

var (
	// PersonMap is a map indexing the attribute names of Person by view name.
	PersonMap = map[string][]string{
		"default": {
			"name",
			"age",
		},
	}
	// FamMap is a map indexing the attribute names of Fam by view name.
	FamMap = map[string][]string{
		"default": {
			"surname",
			"size",
			"mother",
			"father",
			"kids",
		},
	}
)

// ValidatePerson runs the validations defined on the viewed result type Person.
func ValidatePerson(result *Person) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePersonView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFam runs the validations defined on the viewed result type Fam.
func ValidateFam(result *Fam) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFamView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePersonView runs the validations defined on PersonView using the
// "default" view.
func ValidatePersonView(result *PersonView) (err error) {

	return
}

// ValidateFamView runs the validations defined on FamView using the "default"
// view.
func ValidateFamView(result *FamView) (err error) {

	if result.Mother != nil {
		if err2 := ValidatePersonView(result.Mother); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Father != nil {
		if err2 := ValidatePersonView(result.Father); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
