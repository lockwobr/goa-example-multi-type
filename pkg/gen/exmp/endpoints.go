// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp endpoints
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package exmp

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "exmp" service endpoints.
type Endpoints struct {
	GetPerson goa.Endpoint
	GetFam    goa.Endpoint
}

// NewEndpoints wraps the methods of the "exmp" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetPerson: NewGetPersonEndpoint(s),
		GetFam:    NewGetFamEndpoint(s),
	}
}

// Use applies the given middleware to all the "exmp" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetPerson = m(e.GetPerson)
	e.GetFam = m(e.GetFam)
}

// NewGetPersonEndpoint returns an endpoint function that calls the method
// "get-person" of service "exmp".
func NewGetPersonEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.GetPerson(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPerson(res, "default")
		return vres, nil
	}
}

// NewGetFamEndpoint returns an endpoint function that calls the method
// "get-fam" of service "exmp".
func NewGetFamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.GetFam(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFam(res, "default")
		return vres, nil
	}
}
