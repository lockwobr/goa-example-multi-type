// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	exmp "github.com/lockwobr/goa-example-multi-type/pkg/gen/exmp"
	exmpviews "github.com/lockwobr/goa-example-multi-type/pkg/gen/exmp/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetPersonRequest instantiates a HTTP request object with method and
// path set to call the "exmp" service "get-person" endpoint
func (c *Client) BuildGetPersonRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetPersonExmpPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("exmp", "get-person", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetPersonResponse returns a decoder for responses returned by the exmp
// get-person endpoint. restoreBody controls whether the response body should
// be restored after having been read.
func DecodeGetPersonResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetPersonResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("exmp", "get-person", err)
			}
			p := NewGetPersonPersonOK(&body)
			view := "default"
			vres := &exmpviews.Person{Projected: p, View: view}
			if err = exmpviews.ValidatePerson(vres); err != nil {
				return nil, goahttp.ErrValidationError("exmp", "get-person", err)
			}
			res := exmp.NewPerson(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("exmp", "get-person", resp.StatusCode, string(body))
		}
	}
}

// BuildGetFamRequest instantiates a HTTP request object with method and path
// set to call the "exmp" service "get-fam" endpoint
func (c *Client) BuildGetFamRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFamExmpPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("exmp", "get-fam", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetFamResponse returns a decoder for responses returned by the exmp
// get-fam endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetFamResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetFamResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("exmp", "get-fam", err)
			}
			p := NewGetFamFamOK(&body)
			view := "default"
			vres := &exmpviews.Fam{Projected: p, View: view}
			if err = exmpviews.ValidateFam(vres); err != nil {
				return nil, goahttp.ErrValidationError("exmp", "get-fam", err)
			}
			res := exmp.NewFam(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("exmp", "get-fam", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPersonResponseBodyToExmpviewsPersonView builds a value of type
// *exmpviews.PersonView from a value of type *PersonResponseBody.
func unmarshalPersonResponseBodyToExmpviewsPersonView(v *PersonResponseBody) *exmpviews.PersonView {
	if v == nil {
		return nil
	}
	res := &exmpviews.PersonView{
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}
