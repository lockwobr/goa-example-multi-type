// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp HTTP server types
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package server

import (
	exmpviews "github.com/lockwobr/goa-example-multi-type/pkg/gen/exmp/views"
)

// GetPersonResponseBody is the type of the "exmp" service "get-person"
// endpoint HTTP response body.
type GetPersonResponseBody struct {
	Name *string `json:"first_name"`
	Age  *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
}

// GetFamResponseBody is the type of the "exmp" service "get-fam" endpoint HTTP
// response body.
type GetFamResponseBody struct {
	Surname *string               `form:"surname,omitempty" json:"surname,omitempty" xml:"surname,omitempty"`
	Size    *int                  `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Mother  *PersonResponseBody   `json:"mom"`
	Father  *PersonResponseBody   `json:"mom"`
	Kids    []*PersonResponseBody `form:"kids,omitempty" json:"kids,omitempty" xml:"kids,omitempty"`
}

// PersonResponseBody is used to define fields on response body types.
type PersonResponseBody struct {
	Name *string `json:"first_name"`
	Age  *int    `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
}

// NewGetPersonResponseBody builds the HTTP response body from the result of
// the "get-person" endpoint of the "exmp" service.
func NewGetPersonResponseBody(res *exmpviews.PersonView) *GetPersonResponseBody {
	body := &GetPersonResponseBody{
		Name: res.Name,
		Age:  res.Age,
	}
	return body
}

// NewGetFamResponseBody builds the HTTP response body from the result of the
// "get-fam" endpoint of the "exmp" service.
func NewGetFamResponseBody(res *exmpviews.FamView) *GetFamResponseBody {
	body := &GetFamResponseBody{
		Surname: res.Surname,
		Size:    res.Size,
	}
	if res.Mother != nil {
		body.Mother = marshalExmpviewsPersonViewToPersonResponseBody(res.Mother)
	}
	if res.Father != nil {
		body.Father = marshalExmpviewsPersonViewToPersonResponseBody(res.Father)
	}
	if res.Kids != nil {
		body.Kids = make([]*PersonResponseBody, len(res.Kids))
		for i, val := range res.Kids {
			body.Kids[i] = marshalExmpviewsPersonViewToPersonResponseBody(val)
		}
	}
	return body
}
