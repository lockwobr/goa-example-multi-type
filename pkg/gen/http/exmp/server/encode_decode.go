// Code generated by goa v3.5.2, DO NOT EDIT.
//
// exmp HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/lockwobr/goa-example-multi-type/pkg/design -o pkg

package server

import (
	"context"
	"net/http"

	exmpviews "github.com/lockwobr/goa-example-multi-type/pkg/gen/exmp/views"
	goahttp "goa.design/goa/v3/http"
)

// EncodeGetPersonResponse returns an encoder for responses returned by the
// exmp get-person endpoint.
func EncodeGetPersonResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*exmpviews.Person)
		enc := encoder(ctx, w)
		body := NewGetPersonResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetFamResponse returns an encoder for responses returned by the exmp
// get-fam endpoint.
func EncodeGetFamResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*exmpviews.Fam)
		enc := encoder(ctx, w)
		body := NewGetFamResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalExmpviewsPersonViewToPersonResponseBody builds a value of type
// *PersonResponseBody from a value of type *exmpviews.PersonView.
func marshalExmpviewsPersonViewToPersonResponseBody(v *exmpviews.PersonView) *PersonResponseBody {
	if v == nil {
		return nil
	}
	res := &PersonResponseBody{
		Name: v.Name,
		Age:  v.Age,
	}

	return res
}
